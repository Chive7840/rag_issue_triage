version: '3.9'

services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: triage
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ../db/init.sql:/docker-entrypoint-initdb.d/00-init.sql:ro
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build:
      context: ..
      dockerfile: ops/Dockerfile.api
    env_file: ../.env.example
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/triage
      REDIS_URL: redis://redis:6379/0
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - '8000:8000'

  worker:
    build:
      context: ..
      dockerfile: ops/Dockerfile.worker
    env_file: ../.env.example
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/triage
      REDIS_URL: redis://redis:6379/0
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  web:
    image: node:20
    working_dir: /app
    volumes:
      - ../web:/app
    command: sh -c 'npm install && npm run dev -- --host'
    ports:
      - '5173:5173'
    depends_on:
      api:
        condition: service_started

volumes:
  pgdata:
