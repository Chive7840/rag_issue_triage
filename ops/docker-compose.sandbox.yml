services:
  postgres:
    image: postgres:18
    build:
      context: ..
      dockerfile: ops/containers/postgres.Dockerfile
    environment:
      POSTGRES_DB: triage
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ../db/init.sql:/docker-entrypoint-initdb.d/00-init.sql
    ports:
      - '5432:5432'
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5

  bootstrap:
    build:
      context: ..
      dockerfile: ops/containers/api.Dockerfile
    env_file:
      - ../.env.sandbox
    environment:
      SANDBOX_DATA_DIR: /app/db/synth_data
    depends_on:
      postgres:
        condition: service_healthy
    command: ["python", "-m", "api.sandbox.bootstrap", "bootstrap", "--data-dir", "/app/db/synth_data"]
    restart: "no"

  api:
    build:
      context: ..
      dockerfile: ops/containers/api.Dockerfile
    env_file:
      - ../.env.sandbox
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      bootstrap:
        condition: service_completed_successfully
    ports:
      - '8000:8000'

  worker:
    build:
      context: ..
      dockerfile: ops/containers/worker.Dockerfile
    env_file:
      - ../.env.sandbox
    environment:
      SANDBOX_DATA_DIR: /app/db/synth_data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      bootstrap:
        condition: service_completed_successfully

  web:
    build:
      context: ..
      dockerfile: ops/containers/web.Dockerfile
    depends_on:
      api:
        condition: service_started
    ports:
      - '4173:4173'

volumes:
  pgdata:
